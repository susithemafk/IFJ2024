Používejte Linux nebo WSL pro překlad.

Semantika, conversion rules

# they will be testing mainly releations operands conversions see -> https://moodle.vut.cz/mod/page/view.php?id=458178

General rule:

Constant expression with known value at compile time of type f64 can be converted to i32
    - examples of constant expressions (f64 only): 
        . const a = 3.14, (cannot be converted to i32) # this is wierd as heck, that you can do this, but they mention it here -> https://moodle.vut.cz/mod/forum/discuss.php?d=4850
        . const a = 3.0 (can be converted to i32)
        3.14 (cannot be coverted to i32)
        3.0 (can be converted to i32)
    - example of what is NOT an constant expresion (f64 only): 
        . const a = 3.14 # this is const, exp.
        . const b = a + 4 # the value of this is not known at compile time
        . const a = 3.0 * 3 
        . const a = 3.0 * 3.1

Arithmetic operations:
+ - *  (A opr B)

Not allowed: (Incompatable types) 
#note, in semantical Analysis, we check the conditions bellow first, if anyone of them is met
A.nullble == true || B.nullable == true #since once cannot add "null" to something
A.type not in (i32, f64) || B.type not in (i32, f64)
A == "null" or B == "null"

Allowed: 
A.type == B.type -> (SUCESS)

A is i32 literal && B is f64 literal -> (convert A to f64, SUCESS) 
A is f64 literal && B is i32 literal -> (convert B to f64,  SUCESS)

A is f64 variable && B is i32 literal 
    -> (convert B to f64, SUCESS)

A is i32 literal && B is f64 variable
    -> (convert A to f64, SUCESS)

A is i32 variable && B is f64 literal 
    -> (if decimal place of B is only 0s, we convert B to i32 -> SUCESS, else ERROR)

A is f64 literal && A is i32 variable
    -> (if decimal place of A is only 0s, we convert A to i32 -> SUCESS, else ERROR)

A is constant f64 expresion (value known at compile time) && B is I32 variable (not constant, value not known at compile time) 
    -> (if deciaml place of A is only 0s, we convert A to i32 -> SUCCESS, else ERROR)

A is i32 variable (not constant, value not known at compile time) && B is constant f64 expresion (value known at compile time)
    -> (if deciaml place of B is only 0s, we convert B to i32 -> SUCCESS, else ERROR)

A is constant f64 expression (value known at compile time) && B is i32 literal
    -> (convert B to f64 -> SUCCESS)

A is I32 literal && B is constant f64 expression (value known at compile time)
    -> (convert A to f64 -> SUCCESS)

else:
    ERROR

/ (A / B)

Allowed:

1st, sanity check:
A.nullble == true || B.nullable == true #since once cannot add "null" to something
A.type not in (i32, f64) || B.type not in (i32, f64)
A == "null" or B == "null"
B == 0 || B == 0.0 (even if the value of B is known at compile time, need to check this)

A.type == B.type -> SUCCESS

A is constant f64 expression (value known at compile time) && B is i32 (any type: literal, variable, bianry expression ...)
    -> (if decimal place of A is only 0s, we convert A to i32 -> SUCESS else ERROR)

A is i32 (any type: literal, variable, bianry expression ...) && B is a constant f64 expression (value known at compile time)
    -> (if decimal place of B is only 0s, we convert B to i32 -> SUCCESS else ERROR)

else:
    ERROR

Relational operands

== != (A opr B)

1st, handeling of one side or both being "null"

Allowed
A == "null" && B == "null" -> SUCCESS
(A.nullable == true && B == "null") || (A == "null" && B.nullable == true) 
    -> SUCESS

Not allowed:
(A.nullable == false && B == "null") || (A == "null" && B.nullable == false) 
    -> ERROR

2nd, handeling of types

Allowed

A.type == B.type -> SUCESS

A is variable i32 && B is f64 literal
    -> (if deciaml place of B is 0s, convert B f64 -> SUCESS, else ERROR)

A is f64 literal && B is i32 variable
    -> (if decimal place of A is 0s, convert A f64 -> SUCCESS, else ERROR)

A is variable f64 && B is i32 literal
    -> (Convert B to f64 -> SUCCESS)

A is i32 literal && B is variable f64
    -> (Convert A to f64 -> SUCCESS)

A is f64 constant expresion (value known at compile time) && B is i32 variable
    -> (if decimal place of A is 0s, convert A i32, SUCCESS, else -> ERROR)

A is i32 variable && B is f64 constant expresion (value known at compile time)
    -> (if decimal place of B is 0s, convert B i32, SUCCESS, else -> ERROR)

A is f64 constant expresion (value known at compile time) && B is i32 literal
    -> (Convert B to f64 -> SUCCESS)

A is i32 literal && B is f64 constant expresion (value known at compile time)
    -> (Convert A to f64 -> SUCCESS)

else:
    ERROR

> < <= >= (A opr B)

Not Allowed
A.nullable == true || B.nullable == true -> ERROR

Allowed # (same as for ==, !=)

A.type == B.type -> SUCESS

A is variable i32 && B is f64 literal
    -> (if deciaml place of B is 0s, convert B f64 -> SUCESS, else ERROR)

A is f64 literal && B is i32 variable
    -> (if decimal place of A is 0s, convert A f64 -> SUCCESS, else ERROR)

A is variable f64 && B is i32 literal
    -> (Convert B to f64 -> SUCCESS)

A is i32 literal && B is variable f64
    -> (Convert A to f64 -> SUCCESS)

A is f64 constant expresion (value known at compile time) && B is i32 variable
    -> (if decimal place of A is 0s, convert A i32, SUCCESS, else -> ERROR)

A is i32 variable && B is f64 constant expresion (value known at compile time)
    -> (if decimal place of B is 0s, convert B i32, SUCCESS, else -> ERROR)

A is f64 constant expresion (value known at compile time) && B is i32 literal
    -> (Convert B to f64 -> SUCCESS)

A is i32 literal && B is f64 constant expresion (value known at compile time)
    -> (Convert A to f64 -> SUCCESS)

else:
    ERROR

1.
binary tree:

         + -> in here, we have a (var, cannot be converted) and a binary expression, where the value is not know at compile time -> ERROR
        / \
var a: i32  + -> in here, the the return type: f64, and nullable: flase
           / \
          3.0  3