<program> -> <prolog> <u_functions> <main> <u_functions>

<prolog> -> const ifj = @ import ("ifj24.zig");
<main> -> pub fn main () void {< >}
<u_functions> -> <function> <u_functions>
<u_functions> -> ε

<function> -> pub fn <func_id> (<params>) <data_type> {<func_body> <exit>}
<func_call> -> <func_id> (<params>);
<func_assign> -> <var_id> = <func_call>

<params> -> <parameter> <parameter_next>
<params> -> ε
<parameter> -> <var_id> : <data_type>
<parameter_next> -> , <parameter>
<parameter_next> -> ε

<exit> -> <exit_value>
<exit> -> ε
<exit_value> -> return <no_truth_expr>;

<var_def> -> const <var_id> : <data_type> = <no_truth_expr>;
<var_def> -> var <var_id> : <data_type> = <no_truth_expr>;
<var_assign> -> <var_id> = <no_truth_expr>;

<if> -> if (<truth_expr>) {<body>} <else>           //?
<if> -> if (<no_truth_expr>) |<arithm_expr>| {<body>} <else> //?
<else> -> else {<body>}
<else> -> ε

<while> -> while (<truth_expr>) {<body>}            //?
<while> -> while (<no_truth_expr>) |<arithm_expr>| {<body>}  //?

<expr> -> <truth_expr>
<expr> -> <no_truth_expr>
<no_truth_expr> -> <arithm_expr>
<no_truth_expr> -> <null_expr>

<func_id>
<var_id>
<data_type>
<null_expr>