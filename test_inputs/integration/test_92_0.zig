const ifj = @import("ifj24.zig");

// Test mainly generated by CHATGPT, edited to fit IFJ24
// Output compared with zig and matches
// Should work even without FUNEXP, if not, send a message or pull request

pub fn main() void {
    // Scene Configuration
    const viewportWidth: f64 = 20.0;
    const viewportHeight: f64 = 10.0;
    const sphereX: f64 = 0.0;
    const sphereY: f64 = 0.0;
    const sphereRadius: f64 = 5.0;
    const lightX: f64 = 10.0;
    const lightY: f64 = 10.0;

    // Initialize loop variables
    var y: f64 = (0.0 - 1.0) * viewportHeight / 2.0;

    while (y <= viewportHeight / 2.0) {
        var x: f64 = (0.0 - 1.0) * viewportWidth / 2.0;

        while (x <= viewportWidth / 2.0) {
            // Calculate ray direction
            const rayX: f64 = x * 1.0; // Convert to f64
            const rayY: f64 = y * 1.0; // Convert to f64

            // Calculate squared distance from ray to sphere center
            const dx: f64 = rayX - sphereX;
            const dy: f64 = rayY - sphereY;
            const distSq: f64 = (dx * dx) + (dy * dy);

            // Check if the ray hits the sphere
            if (distSq <= (sphereRadius * sphereRadius)) {
                // Calculate light intensity
                const nx: f64 = dx / sphereRadius; // Normalized vector (x-component)
                const ny: f64 = dy / sphereRadius; // Normalized vector (y-component)
                const lx: f64 = lightX - rayX;
                const ly: f64 = lightY - rayY;
                const input: f64 = (lx * lx) + (ly * ly);
                const lenL: f64 = sqrt(input);

                if (lenL > 0.0) {
                    const normLx: f64 = lx / lenL;
                    const normLy: f64 = ly / lenL;
                    const dot: f64 = (nx * normLx) + (ny * normLy);

                    if (dot > 0.0) {
                        ifj.write("*"); // Bright pixel
                    } else {
                        ifj.write("."); // Dim pixel
                    }
                } else {
                    ifj.write("."); // Default to dim if no light vector
                }
            } else {
                ifj.write(" "); // Background
            }

            // Increment x
            x = x + 1;
        }

        // Newline after each row
        ifj.write("\n");

        // Increment y
        y = y + 1;
    }

    // Completion message
    ifj.write("Raytracing complete.\n");
}

// Simple square root function (helper)
pub fn sqrt(x: f64) f64 {
    var guess: f64 = x / 2.0;
    const tolerance: f64 = 0.000001;

    while ((guess * guess) > (x + tolerance)) {
        guess = (guess + (x / guess)) / 2.0;
    }
    return guess;
}
